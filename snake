#!/bin/python3

from argparse import ArgumentParser
import csv
import time
from engine.direction import Direction
from engine.game import Game

Q = {}

def get_Q(state: list[bool], action: int) -> float:
    """
    Retrieves the Q-value for a given (state, action) pair.

    Args:
        state (list[bool]): The current state of the agent (snake).
        action (int): The action index (0 to 3, representing directions).

    Returns:
        float: The Q-value for the given pair, or 0.0 if not yet defined.
    """
    return Q.get((tuple(state), action), 0.0)


def action(state: list[bool]) -> int:
    """
    Selects an action using the epsilon-greedy policy.

    Args:
        state (list[bool]): The current state.

    Returns:
        int: The index of the selected action.
    """

    return max(range(4), key=lambda a: get_Q(state, a))

if __name__ == "__main__":
    parser = ArgumentParser("snake")

    parser.add_argument("-l", "--load")
    parser.add_argument("-n", "--number", type=int)
    parser.add_argument("--visual", action='store_true')

    args = parser.parse_args()

    if args.load is not None:
        with open(args.load, "r") as file:
            data = csv.DictReader(file)

            for row in data:
                state = eval(row['State'])
                a = Direction[row['Action']].index

                Q[(state, a)] = float(row['Q_Value'])

        n = 1

        if args.number:
            n = int(args.number)

        for i in range(n):
            isLast = False
            game = Game()

            game.start()

            snake = game.get_snake()

            while not isLast:
                s = snake.get_state()
                a = action(s)

                try:
                    r = snake.move(list(Direction)[a])
                except:
                    isLast = True

                if args.visual:
                    game.get_world().render()
                    time.sleep(0.3)

            print(f"[{i + 1}] size : {snake.get_size()}")