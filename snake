#!/bin/python3

import argparse
import ai.play as play
import ai.replay as replay
import ai.train as train
import numpy as np
from engine.world import World
from engine.direction import Direction
from engine.exception.gameover import GameOver
from engine.entity.snake import Snake
from engine.entity.apple import Apple, AppleType


def play_mode():
    world = World()
    snake = Snake(world)

    world.spawn_entity(snake)
    world.spawn_entity(Apple(world, AppleType.GREEN))
    world.spawn_entity(Apple(world, AppleType.GREEN))
    world.spawn_entity(Apple(world, AppleType.RED))

    while True:
        world.render()

        try:
            key = input("Move (W/A/S/D) : ").lower()
        except EOFError:
            continue

        if key == 'q':
            print('Quitting the program')
            break

        try:
            if key == 'w':
                snake.move(Direction.NORTH)
            elif key == 's':
                snake.move(Direction.SOUTH)
            elif key == 'a':
                snake.move(Direction.WEST)
            elif key == 'd':
                snake.move(Direction.EAST)
        except GameOver:
            print("Game Over")
            break


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Snake AI utility script")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Command: load
    load_parser = subparsers.add_parser("load",
                                        help="Load and run saved AI")
    load_parser.add_argument("file",
                             help="Path to saved AI file")
    load_parser.add_argument("-n", type=int, default=1,
                             help="Number of simulations")
    load_parser.add_argument("--visual", action="store_true",
                             help="Enable visual display")
    load_parser.add_argument("--step", action="store_true",
                             help="Enable step by step")

    # Command: replay
    replay_parser = subparsers.add_parser("replay",
                                          help="Replay from saved replay file")
    replay_parser.add_argument("file",
                               help="Path to replay file")
    replay_parser.add_argument("episode", type=int,
                               help="Path to replay file", default=-1)
    replay_parser.add_argument("--step", action="store_true",
                               help="Enable step by step")

    # Command: train
    train_parser = subparsers.add_parser("train",
                                         help="Train new AI and save progress")
    train_parser.add_argument("filename",
                              help="Path to save training results")
    train_parser.add_argument("--visual", action="store_true",
                              help="Enable visual display")

    # Command: play
    train_parser = subparsers.add_parser("play", help="Play a game")

    args = parser.parse_args()

    if args.command == "load":
        if args.n < 1:
            print("Number of simulations must be greater than 0")
            exit(1)

        sizes = []
        for i in range(args.n):
            try:
                sizes.append(play.play(args.file, args.visual, args.step))
            except FileNotFoundError:
                print("{} not found".format(args.file))
                exit(1)
            except ValueError as e:
                print(e)
                exit(1)

            print(f"[{i + 1}] Final size : {sizes[i]}")

        print(f"\nSize mean: {np.mean(sizes)}, Max length: {np.max(sizes)}")
    elif args.command == "replay":
        try:
            replay.play_replay(args.file, args.episode, args.step)
        except FileNotFoundError:
            print("{} not found".format(args.file))
            exit(1)
        except ValueError as e:
            print(e)
            exit(1)
    elif args.command == "train":
        try:
            train.train(args.filename)
        except FileNotFoundError:
            print("{}.csv not access".format(args.filename))
            exit(1)
        except ValueError as e:
            print(e)
            exit(1)
    elif args.command == "play":
        play_mode()
