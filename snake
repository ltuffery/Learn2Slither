#!/bin/python3

import argparse
import ai.play as play
import ai.replay as replay
import ai.train as train
import numpy as np

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Snake AI utility script")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Command: load
    load_parser = subparsers.add_parser("load", help="Load and run saved AI")
    load_parser.add_argument("file", help="Path to saved AI file")
    load_parser.add_argument("-n", type=int, default=1, help="Number of simulations")
    load_parser.add_argument("--visual", action="store_true", help="Enable visual display")
    load_parser.add_argument("--step", action="store_true", help="Enable step by step")

    # Command: replay
    replay_parser = subparsers.add_parser("replay", help="Replay from saved replay file")
    replay_parser.add_argument("file", help="Path to replay file")
    replay_parser.add_argument("episode", type=int, help="Path to replay file", default=-1)

    # Command: train
    train_parser = subparsers.add_parser("train", help="Train new AI and save progress")
    train_parser.add_argument("filename", help="Path to save training results")
    train_parser.add_argument("--visual", action="store_true", help="Enable visual display")

    args = parser.parse_args()

    if args.command == "load":
        sizes = []
        for i in range(args.n):
            try:
                sizes.append(play.play(args.file, args.visual, args.step))
            except FileNotFoundError:
                print("{} not found".format(args.file))
                exit(0)

            print(f"[{i + 1}] Final size : {sizes[i]}")

        print(f"\nSize mean: {np.mean(sizes)}")
    elif args.command == "replay":
        try:
            replay.play_replay(args.file, args.episode)
        except FileNotFoundError:
            print("{} not found".format(args.file))
    elif args.command == "train":
        try:
            train.train(args.filename)
        except FileNotFoundError:
            print("{}.csv not access".format(args.filename))